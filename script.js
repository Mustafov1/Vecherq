// Bulgarian ingredients organized by category
let selectedIngredients = [];
let currentRecipes = [];

const ingredientCategories = {
    '–ú–µ—Å–æ –∏ —Ä–∏–±–∞': [
        '–ø–∏–ª–µ—à–∫–æ –º–µ—Å–æ', '—Å–≤–∏–Ω—Å–∫–æ –º–µ—Å–æ', '—Ç–µ–ª–µ—à–∫–æ –º–µ—Å–æ', '–∞–≥–Ω–µ—à–∫–æ –º–µ—Å–æ',
        '–∫–∞–π–º–∞ —Å–º–µ—Å–µ–Ω–∞', '–Ω–∞–¥–µ–Ω–∏—á–∫–∏', '–±–µ–∫–æ–Ω', '—à—É–Ω–∫–∞',
        '—Ä–∏–±–∞', '—Å—å–æ–º–≥–∞', '—Å–∫—É–º—Ä–∏—è', '–ø—ä—Å—Ç—ä—Ä–≤–∞'
    ],
    '–ó–µ–ª–µ–Ω—á—É—Ü–∏': [
        '–ª—É–∫', '—á–µ—Å—ä–Ω', '–¥–æ–º–∞—Ç–∏', '–∫—Ä–∞—Å—Ç–∞–≤–∏—Ü–∏', '—á—É—à–∫–∏',
        '–∫–∞—Ä—Ç–æ—Ñ–∏', '–º–æ—Ä–∫–æ–≤', '–∑–µ–ª–µ', '—Å–ø–∞–Ω–∞–∫', '–ø—Ä–∞–∑ –ª—É–∫',
        '—Ç–∏–∫–≤–∏—á–∫–∏', '–ø–∞—Ç–ª–∞–¥–∂–∞–Ω', '–±—Ä–æ–∫–æ–ª–∏', '–∫–∞—Ä—Ñ–∏–æ–ª',
        '—Ü–≤–µ–∫–ª–æ', '—Ä–µ–ø–∏—á–∫–∏', '–º–∞–≥–¥–∞–Ω–æ–∑', '–∫–æ–ø—ä—Ä'
    ],
    '–ú–ª–µ—á–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏': [
        '—è–π—Ü–∞', '–º–ª—è–∫–æ', '—Å–∏—Ä–µ–Ω–µ', '–∫–∞—à–∫–∞–≤–∞–ª', '–∏–∑–≤–∞—Ä–∞',
        '–∫–∏—Å–µ–ª–æ –º–ª—è–∫–æ', '—Å–º–µ—Ç–∞–Ω–∞', '–º–∞—Å–ª–æ', '–∫—Ä–µ–º–∞ —Å–∏—Ä–µ–Ω–µ'
    ],
    '–ó—ä—Ä–Ω–µ–Ω–∏ —Ö—Ä–∞–Ω–∏': [
        '–æ—Ä–∏–∑', '–º–∞–∫–∞—Ä–æ–Ω–∏', '—Å–ø–∞–≥–µ—Ç–∏', '–±—Ä–∞—à–Ω–æ', '–±—É–ª–≥—É—Ä',
        '–æ–≤–µ—Å–µ–Ω–∏ —è–¥–∫–∏', '–ª–µ—â–∞', '—Ñ–∞—Å—É–ª', '–Ω–∞—Ö—É—Ç'
    ],
    '–û—Å–Ω–æ–≤–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏': [
        '–æ–ª–∏–æ', '–æ—Ü–µ—Ç', '–∑–∞—Ö–∞—Ä', '—Å–æ–ª'
    ]
};

// Initialize the app
function initApp() {
    const container = document.getElementById('ingredientsContainer');
    
    Object.entries(ingredientCategories).forEach(([category, ingredients]) => {
        const section = document.createElement('div');
        section.className = 'ingredients-section';
        
        const title = document.createElement('div');
        title.className = 'category-title';
        title.textContent = category;
        section.appendChild(title);
        
        const grid = document.createElement('div');
        grid.className = 'ingredients-grid';
        
        ingredients.forEach(ingredient => {
            const item = document.createElement('div');
            item.className = 'ingredient-item';
            item.innerHTML = `
                <input type="checkbox" id="ing_${ingredient.replace(/\s+/g, '_')}" value="${ingredient}">
                <label for="ing_${ingredient.replace(/\s+/g, '_')}">${ingredient}</label>
            `;
            item.onclick = () => toggleIngredient(ingredient, item);
            grid.appendChild(item);
        });
        
        section.appendChild(grid);
        container.appendChild(section);
    });
}

function toggleIngredient(ingredient, element) {
    const checkbox = element.querySelector('input[type="checkbox"]');
    checkbox.checked = !checkbox.checked;
    
    if (checkbox.checked) {
        element.classList.add('selected');
        if (!selectedIngredients.includes(ingredient)) {
            selectedIngredients.push(ingredient);
        }
    } else {
        element.classList.remove('selected');
        selectedIngredients = selectedIngredients.filter(ing => ing !== ingredient);
    }
}

async function generateRecipes() {
    const customIngredients = document.getElementById('customIngredients').value;
    let allIngredients = [...selectedIngredients];
    
    if (customIngredients.trim()) {
        const customList = customIngredients.split(',').map(ing => ing.trim()).filter(ing => ing);
        allIngredients = [...allIngredients, ...customList];
    }

    if (allIngredients.length === 0) {
        alert('–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –ø–æ–Ω–µ –µ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç!');
        return;
    }

    // Show loading
    const btn = document.getElementById('generateBtn');
    btn.innerHTML = '‚è≥ –¢—ä—Ä—Å—è —Ä–µ—Ü–µ–ø—Ç–∏...';
    btn.disabled = true;

    try {
        const recipes = await callOpenAI(allIngredients);
        currentRecipes = recipes;
        showRecipeSuggestions();
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∏:', error);
        alert('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞. –ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.');
    } finally {
        btn.innerHTML = 'üîç –ù–∞–º–µ—Ä–∏ —Ä–µ—Ü–µ–ø—Ç–∏';
        btn.disabled = false;
    }
}

async function callOpenAI(ingredients) {
    const prompt = createPrompt(ingredients);
    
    const response = await fetch('/api/openai', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages: [
                {
                    role: 'user',
                    content: prompt
                }
            ],
            max_tokens: 500,
            temperature: 0.6
        })
    });

    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    const recipesText = data.choices[0].message.content;
    
    return parseGPTResponse(recipesText);
}

function createPrompt(ingredients) {
    const ingredientsList = ingredients.join(', ');
    
    return `–¢–∏ —Å–∏ –µ–∫—Å–ø–µ—Ä—Ç –≥–æ—Ç–≤–∞—á, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω –≤ –±—ä–ª–≥–∞—Ä—Å–∫–∞—Ç–∞ –∫—É—Ö–Ω—è. –¢—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—à 4 –≤–∫—É—Å–Ω–∏ —Ä–µ—Ü–µ–ø—Ç–∏ –∑–∞ –≤–µ—á–µ—Ä—è, –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ —Å–ª–µ–¥–Ω–∏—Ç–µ –Ω–∞–ª–∏—á–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏: ${ingredientsList}

–í–ê–ñ–ù–ò –ò–ó–ò–°–ö–í–ê–ù–ò–Ø:
- –†–µ—Ü–µ–ø—Ç–∏—Ç–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–∞ –°–ê–ú–û –æ—Ç –±—ä–ª–≥–∞—Ä—Å–∫–∞—Ç–∞ –∫—É—Ö–Ω—è (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∏ –∏ –º–æ–¥–µ—Ä–Ω–∏ –±—ä–ª–≥–∞—Ä—Å–∫–∏ —è—Å—Ç–∏—è)
- –ù–ï –∏–∑–ø–æ–ª–∑–≤–∞–π –Ω–∏–∫–∞–∫–≤–∏ –ø–æ–¥–ø—Ä–∞–≤–∫–∏ –≤ —Å–ø–∏—Å—ä—Ü–∏—Ç–µ —Å—ä—Å —Å—ä—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏—Ç–µ
- –í—Å–µ–∫–∏ —Ä–µ—Ü–µ–ø—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞ –ø–æ–Ω–µ 3-4 –æ—Ç –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏
- –†–µ—Ü–µ–ø—Ç–∏—Ç–µ –¥–∞ —Å–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏ –∑–∞ –≤–µ—á–µ—Ä—è –∑–∞ —Å–µ–º–µ–π—Å—Ç–≤–æ
- –í–∫–ª—é—á–∏ –ø–æ–ø—É–ª—è—Ä–Ω–∏ –±—ä–ª–≥–∞—Ä—Å–∫–∏ —è—Å—Ç–∏—è –∫–∞—Ç–æ –º—É—Å–∞–∫–∞, —Å–∞—Ä–º–∏, –∫–µ–±–∞–ø—á–µ—Ç–∞, –∫–∞—á–∞–º–∞–∫, —à–∫–µ–º–±–µ —á–æ—Ä–±–∞, —Ç–∞—Ä–∞—Ç–æ—Ä, –ø—ä–ª–Ω–µ–Ω–∏ —á—É—à–∫–∏, –∫—é—Ñ—Ç–µ—Ç–∞, —à–Ω–∏—Ü–µ–ª–∏ –∏ –¥—Ä.

–ó–∞ –≤—Å–µ–∫–∏ —Ä–µ—Ü–µ–ø—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏ –¢–û–ß–ù–û –≤ —Ç–æ–∑–∏ —Ñ–æ—Ä–º–∞—Ç:

–†–ï–¶–ï–ü–¢–ê 1:
–ó–∞–≥–ª–∞–≤–∏–µ: [–∏–º–µ –Ω–∞ —è—Å—Ç–∏–µ—Ç–æ]
–û–ø–∏—Å–∞–Ω–∏–µ: [–∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ 1 –∏–∑—Ä–µ—á–µ–Ω–∏–µ]
–í—Ä–µ–º–µ: [–≤—Ä–µ–º–µ –≤ –º–∏–Ω—É—Ç–∏]
–¢—Ä—É–¥–Ω–æ—Å—Ç: [–õ–µ—Å–Ω–æ/–°—Ä–µ–¥–Ω–æ/–¢—Ä—É–¥–Ω–æ]
–ü–æ—Ä—Ü–∏–∏: [–±—Ä–æ–π –ø–æ—Ä—Ü–∏–∏]
–ü—Ä–æ–¥—É–∫—Ç–∏:
- [–ø—Ä–æ–¥—É–∫—Ç 1 —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- [–ø—Ä–æ–¥—É–∫—Ç 2 —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- [–∏ —Ç.–Ω.]
–ü—Ä–∏–≥–æ—Ç–≤—è–Ω–µ:
1. [—Å—Ç—ä–ø–∫–∞ 1]
2. [—Å—Ç—ä–ø–∫–∞ 2]
3. [–∏ —Ç.–Ω.]

[–ø–æ–≤—Ç–æ—Ä–∏ —Å—ä—â–∏—è —Ñ–æ—Ä–º–∞—Ç –∑–∞ –†–ï–¶–ï–ü–¢–ê 2, –†–ï–¶–ï–ü–¢–ê 3, –†–ï–¶–ï–ü–¢–ê 4]

–£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –æ—Ç–≥–æ–≤–æ—Ä—ä—Ç –µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫ –∏ —Å–ª–µ–¥–≤–∞ —Ç–æ—á–Ω–æ —Ç–æ–∑–∏ —Ñ–æ—Ä–º–∞—Ç.`;
}

function parseGPTResponse(responseText) {
    const recipes = [];
    const recipeBlocks = responseText.split(/–†–ï–¶–ï–ü–¢–ê \d+:/);
    
    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –ø—ä—Ä–≤–∏—è –ø—Ä–∞–∑–µ–Ω –µ–ª–µ–º–µ–Ω—Ç
    recipeBlocks.shift();
    
    recipeBlocks.forEach(block => {
        try {
            const lines = block.trim().split('\n').filter(line => line.trim());
            
            const recipe = {
                title: '',
                preview: '',
                time: '',
                difficulty: '',
                servings: 0,
                ingredients: [],
                instructions: []
            };
            
            let currentSection = '';
            
            lines.forEach(line => {
                const trimmedLine = line.trim();
                
                if (trimmedLine.startsWith('–ó–∞–≥–ª–∞–≤–∏–µ:')) {
                    recipe.title = trimmedLine.replace('–ó–∞–≥–ª–∞–≤–∏–µ:', '').trim();
                } else if (trimmedLine.startsWith('–û–ø–∏—Å–∞–Ω–∏–µ:')) {
                    recipe.preview = trimmedLine.replace('–û–ø–∏—Å–∞–Ω–∏–µ:', '').trim();
                } else if (trimmedLine.startsWith('–í—Ä–µ–º–µ:')) {
                    recipe.time = trimmedLine.replace('–í—Ä–µ–º–µ:', '').trim();
                } else if (trimmedLine.startsWith('–¢—Ä—É–¥–Ω–æ—Å—Ç:')) {
                    recipe.difficulty = trimmedLine.replace('–¢—Ä—É–¥–Ω–æ—Å—Ç:', '').trim();
                } else if (trimmedLine.startsWith('–ü–æ—Ä—Ü–∏–∏:')) {
                    recipe.servings = parseInt(trimmedLine.replace('–ü–æ—Ä—Ü–∏–∏:', '').trim());
                } else if (trimmedLine === '–ü—Ä–æ–¥—É–∫—Ç–∏:') {
                    currentSection = 'ingredients';
                } else if (trimmedLine === '–ü—Ä–∏–≥–æ—Ç–≤—è–Ω–µ:') {
                    currentSection = 'instructions';
                } else if (trimmedLine.startsWith('-') && currentSection === 'ingredients') {
                    recipe.ingredients.push(trimmedLine.replace('-', '').trim());
                } else if (/^\d+\./.test(trimmedLine) && currentSection === 'instructions') {
                    recipe.instructions.push(trimmedLine.replace(/^\d+\./, '').trim());
                }
            });
            
            if (recipe.title) {
                recipes.push(recipe);
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∞:', error);
        }
    });
    
    return recipes;
}

function getSampleRecipes() {
    // –ü—Ä–∏–º–µ—Ä–Ω–∏ —Ä–µ—Ü–µ–ø—Ç–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ –∫–æ–≥–∞—Ç–æ –Ω—è–º–∞ API –∫–ª—é—á
    return [
        {
            title: '–ü–∏–ª–µ—à–∫–∏ —à–Ω–∏—Ü–µ–ª–∏ —Å –∫–∞—Ä—Ç–æ—Ñ–∏',
            preview: '–°–æ—á–Ω–∏ –ø–∞–Ω–∏—Ä–∞–Ω–∏ —à–Ω–∏—Ü–µ–ª–∏ —Å –ø–µ—á–µ–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ —Å–≤–µ–∂–∞ —Å–∞–ª–∞—Ç–∞',
            time: '45 –º–∏–Ω',
            difficulty: '–õ–µ—Å–Ω–æ',
            servings: 4,
            ingredients: [
                '4 –±—Ä. –ø–∏–ª–µ—à–∫–∏ –≥—ä—Ä–¥–∏',
                '4-5 –±—Ä. –∫–∞—Ä—Ç–æ—Ñ–∏',
                '2 —è–π—Ü–∞',
                '100–≥ –≥–∞–ª–µ—Ç–∞',
                '50–º–ª –æ–ª–∏–æ'
            ],
            instructions: [
                '–ù–∞—Ä–µ–∂–µ—Ç–µ –ø–∏–ª–µ—à–∫–∏—Ç–µ –≥—ä—Ä–¥–∏ –Ω–∞ —à–Ω–∏—Ü–µ–ª–∏ –∏ –≥–∏ –ø–æ—á—É–∫–∞–π—Ç–µ –ª–µ–∫–æ',
                '–ü–∞–Ω–∏—Ä–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ –≤ –±—Ä–∞—à–Ω–æ, —Ä–∞–∑–±–∏—Ç–∏ —è–π—Ü–∞ –∏ –≥–∞–ª–µ—Ç–∞',
                '–ò–∑–ø—ä—Ä–∂–µ—Ç–µ –≤ –≥–æ—Ä–µ—â–æ –æ–ª–∏–æ –æ—Ç –¥–≤–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏ –¥–æ –∑–ª–∞—Ç–∏—Å—Ç —Ü–≤—è—Ç',
                '–û–±–µ–ª–µ—Ç–µ –∏ –Ω–∞—Ä–µ–∂–µ—Ç–µ –∫–∞—Ä—Ç–æ—Ñ–∏—Ç–µ, –ø–µ—á–µ—Ç–µ –≥–∏ –Ω–∞ —Ñ—É—Ä–Ω–∞',
                '–°–µ—Ä–≤–∏—Ä–∞–π—Ç–µ –≥–æ—Ä–µ—â–∏ —Å –ª—é–±–∏–º–∞ —Å–∞–ª–∞—Ç–∞'
            ]
        },
        {
            title: '–ú—É—Å–∞–∫–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–∏',
            preview: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –º—É—Å–∞–∫–∞ —Å –∫–∞–π–º–∞ –∏ –∫–∞—Ä—Ç–æ—Ñ–∏',
            time: '90 –º–∏–Ω',
            difficulty: '–°—Ä–µ–¥–Ω–æ',
            servings: 6,
            ingredients: [
                '1–∫–≥ –∫–∞—Ä—Ç–æ—Ñ–∏',
                '500–≥ —Å–º–µ—Å–µ–Ω–∞ –∫–∞–π–º–∞',
                '2 –ª—É–∫–∞',
                '3 —è–π—Ü–∞',
                '200–º–ª –º–ª—è–∫–æ',
                '100–≥ —Å–∏—Ä–µ–Ω–µ'
            ],
            instructions: [
                '–û–±–µ–ª–µ—Ç–µ –∏ –Ω–∞—Ä–µ–∂–µ—Ç–µ –∫–∞—Ä—Ç–æ—Ñ–∏—Ç–µ –Ω–∞ –∫—Ä—ä–≥—á–µ—Ç–∞',
                '–ò–∑–ø—ä—Ä–∂–µ—Ç–µ –∫–∞–π–º–∞—Ç–∞ —Å –Ω–∞—Ä—è–∑–∞–Ω –ª—É–∫',
                '–ü–æ–¥—Ä–µ–¥–µ—Ç–µ —Å–ª–æ–µ–≤–µ –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ –∫–∞–π–º–∞ –≤ —Ç–∞–≤–∞',
                '–†–∞–∑–±–∏–π—Ç–µ —è–π—Ü–∞—Ç–∞ —Å –º–ª—è–∫–æ—Ç–æ –∏ —Å–∏—Ä–µ–Ω–µ—Ç–æ',
                '–ó–∞–ª–∏–≤–∞–π—Ç–µ —Å—ä—Å —Å–º–µ—Å—Ç–∞ –∏ –ø–µ—á–µ—Ç–µ –Ω–∞ 180¬∞C –∑–∞ 45 –º–∏–Ω',
                '–°–µ—Ä–≤–∏—Ä–∞–π—Ç–µ —Ç–æ–ø–ª–∞ —Å –∫–∏—Å–µ–ª–æ –º–ª—è–∫–æ'
            ]
        }
    ];
}

function showRecipeSuggestions() {
    const suggestionsDiv = document.getElementById('recipeSuggestions');
    const recipeList = document.getElementById('recipeList');
    
    recipeList.innerHTML = '';
    
    currentRecipes.forEach((recipe, index) => {
        const recipeCard = document.createElement('div');
        recipeCard.className = 'recipe-card';
        recipeCard.innerHTML = `
            <div class="recipe-title">${recipe.title}</div>
            <div class="recipe-preview">${recipe.preview}</div>
            <div style="margin-top: 10px; font-size: 0.9rem; color: #999;">
                ‚è±Ô∏è ${recipe.time} ‚Ä¢ üë• ${recipe.servings} –ø–æ—Ä—Ü–∏–∏ ‚Ä¢ üìä ${recipe.difficulty}
            </div>
        `;
        recipeCard.onclick = () => showRecipeDetails(index);
        recipeList.appendChild(recipeCard);
    });
    
    suggestionsDiv.style.display = 'block';
    suggestionsDiv.scrollIntoView({ behavior: 'smooth' });
}

function showRecipeDetails(recipeIndex) {
    const recipe = currentRecipes[recipeIndex];
    const detailsDiv = document.getElementById('recipeDetails');
    
    let difficultyClass = 'difficulty-easy';
    if (recipe.difficulty === '–°—Ä–µ–¥–Ω–æ') difficultyClass = 'difficulty-medium';
    if (recipe.difficulty === '–¢—Ä—É–¥–Ω–æ') difficultyClass = 'difficulty-hard';
    
    detailsDiv.innerHTML = `
        <button class="back-btn" onclick="hideRecipeDetails()">‚Üê –û–±—Ä–∞—Ç–Ω–æ –∫—ä–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ç–∞</button>
        
        <h1 style="color: #667eea; margin-bottom: 20px;">${recipe.title}</h1>
        
        <div class="recipe-meta">
            <div class="meta-item">
                <div class="meta-value">${recipe.time}</div>
                <div class="meta-label">–í—Ä–µ–º–µ –∑–∞ –≥–æ—Ç–≤–µ–Ω–µ</div>
            </div>
            <div class="meta-item">
                <div class="meta-value ${difficultyClass}">${recipe.difficulty}</div>
                <div class="meta-label">–¢—Ä—É–¥–Ω–æ—Å—Ç</div>
            </div>
            <div class="meta-item">
                <div class="meta-value">${recipe.servings}</div>
                <div class="meta-label">–ü–æ—Ä—Ü–∏–∏</div>
            </div>
        </div>
        
        <div class="ingredients-list">
            <h3 class="section-title">–ù–µ–æ–±—Ö–æ–¥–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∏:</h3>
            <ul>
                ${recipe.ingredients.map(ing => `<li>${ing}</li>`).join('')}
            </ul>
        </div>
        
        <div class="instructions-list">
            <h3 class="section-title">–ù–∞—á–∏–Ω –Ω–∞ –ø—Ä–∏–≥–æ—Ç–≤—è–Ω–µ:</h3>
            <ol>
                ${recipe.instructions.map(step => `<li>${step}</li>`).join('')}
            </ol>
        </div>
    `;
    
    detailsDiv.style.display = 'block';
    detailsDiv.scrollIntoView({ behavior: 'smooth' });
}

function hideRecipeDetails() {
    document.getElementById('recipeDetails').style.display = 'none';
    document.getElementById('recipeSuggestions').scrollIntoView({ behavior: 'smooth' });
}

// Initialize app when page loads
document.addEventListener('DOMContentLoaded', initApp);